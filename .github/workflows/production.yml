name: Jarvis Design Deployment

on:
    push:
      branches:
        - production

env:
  EC2_SERVER_DIR: /home/${{ secrets.EC2_USER }}/server
  EC2_SSH_ADDRESS: ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}

  DOCKER_GPG_URL: https://download.docker.com/linux/ubuntu/gpg
  DOCKER_GPG_PATH: /etc/apt/keyrings/docker.gpg
  DOCKER_REPO_URL: https://download.docker.com/linux/ubuntu
  DOCKER_REPO_LIST: /etc/apt/sources.list.d/docker.list

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: docker build -t johnkristan/jarvis-designs:latest ./server  -f ./server/Dockerfile

      - name: üîê Login to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Push Docker Image to Docker Hub
        run: docker push johnkristan/jarvis-designs:latest


  production:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create Environment Variable for EC2
        uses: ./.github/actions/config-env
        with:
          app_key: ${{ secrets.APP_KEY }}
          db_connection: ${{ secrets.DB_CONNECTION }}
          db_database: ${{ secrets.DB_DATABASE }}
          db_host: ${{ secrets.DB_HOST }}
          db_password: ${{ secrets.DB_PASSWORD }}
          db_port: ${{ secrets.DB_PORT }}
          db_username: ${{ secrets.DB_USERNAME }}
          pusher_app_id: ${{ secrets.PUSHER_APP_ID }}
          pusher_app_key: ${{ secrets.PUSHER_APP_KEY }}
          pusher_app_secret: ${{ secrets.PUSHER_APP_SECRET }}
          aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          mail_username: ${{ secrets.MAIL_USERNAME }}
          mail_password: ${{ secrets.MAIL_PASSWORD }}
          mail_from_address: ${{ secrets.MAIL_FROM_ADDRESS }}
          sentry_laravel_dsn: ${{ secrets.SENTRY_LARAVEL_DSN }}
          sentry_traces_sample_rate: ${{ secrets.SENTRY_TRACES_SAMPLE_RATE }}


      - name: Make Server Directory on EC2
        uses: appleboy/ssh-action@v1.0.2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            mkdir -p ${{ env.EC2_SERVER_DIR }}


      - name: Upload files to EC2 using native SCP
        uses: ./.github/actions/upload-config-files
        with:
          ec2_secret_key: ${{ secrets.EC2_KEY }}
          ec2_ssh_address: ${{ env.EC2_SSH_ADDRESS }}
          ec2_server_directory: ${{ env.EC2_SERVER_DIR }}
          files_to_upload: 'server/docker-compose.yml server/default.conf .env'
         
      - name: Install Docker and Docker Compose inside EC2
        uses: appleboy/ssh-action@v1.0.2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -e

            if ! command -v docker &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y ca-certificates curl gnupg
              sudo install -m 0755 -d /etc/apt/keyrings

              # Download and save Docker GPG key
              curl -fsSL "${{ env.DOCKER_GPG_URL }}" | sudo gpg --dearmor -o "${{ env.DOCKER_GPG_PATH }}"

              # Set correct permissions for the GPG key
              sudo chmod a+r "${{ env.DOCKER_GPG_PATH }}"

              # Add Docker official repository
              echo \
                  "deb [arch=$(dpkg --print-architecture) signed-by=${{ env.DOCKER_GPG_PATH }}] \
                  ${{ env.DOCKER_REPO_URL }} \
                  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
                  sudo tee "${{ env.DOCKER_REPO_LIST }}" > /dev/null

              sudo apt-get update
             
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin 
                
              sudo usermod -aG docker $USER
            fi

            if ! docker compose version &> /dev/null; then
              sudo apt-get install -y docker-compose-plugin
            fi

      - name: Setup Certbot Certificates
        uses: appleboy/ssh-action@v1.0.2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -e

            # Install certbot if not yet existing
            if ! command -v certbot &> /dev/null; then
              sudo apt update && sudo apt install -y snapd
              
              # Ensure snap core is up to date
              sudo snap install core
              sudo snap refresh core

              sudo snap install --classic certbot

              # Make certbot globally accessible
              sudo ln -s /snap/bin/certbot /usr/bin/certbot
            fi

            sudo certbot certonly --standalone  \
              --non-interactive \
              --agree-tos \
              --redirect \
              -m ${{ secrets.CERTBOT_EMAIL }} \
              -d ${{ secrets.API_DOMAIN }}

            # Enable auto-renewal timer
            sudo systemctl enable snap.certbot.renew.service
            sudo systemctl enable snap.certbot.renew.timer
            sudo systemctl start snap.certbot.renew.timer

            # (Optional) Check renewal schedule
            sudo systemctl list-timers | grep certbot || true


      - name: üöÄ Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1.0.2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -e

            cd ${{ env.EC2_SERVER_DIR }}

            echo "üìÑ Checking Files inside EC2"
            ls -lah

            echo "üìÑ Viewing .env"
            cat .env

            echo "üîê Logging into Docker Hub..."
            echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

            echo "Stopping old containers..."
            docker compose down || true

            echo "Pulling latest images..."
            docker compose pull

            echo "Starting containers..."
            docker compose up -d --remove-orphans

            echo "Checking container status..."
            docker compose ps

            echo "Recent logs:"
            docker compose logs --tail=50
